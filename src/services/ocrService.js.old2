import TextRecognition from '@react-native-ml-kit/text-recognition';

// --- calculateTextConfidence, performEnhancedMLKitOCR, extractMerchant, extractDate, extractTotals remain unchanged from previous response ---
const calculateTextConfidence = (text, blocks) => { if (!text || text.length === 0) return 0; let confidence = 0.5; if (text.length > 100) confidence += 0.2; if (text.length > 200) confidence += 0.1; if (blocks && blocks.length > 5) confidence += 0.1; if (blocks && blocks.length > 10) confidence += 0.1; const hasNumbers = /\d/.test(text); const hasPrices = /\$\d+\.?\d*/.test(text); const hasWords = /[A-Za-z]{3,}/.test(text); const hasStructure = text.includes('\n'); if (hasNumbers) confidence += 0.1; if (hasPrices) confidence += 0.2; if (hasWords) confidence += 0.1; if (hasStructure) confidence += 0.1; const receiptWords = ['total', 'subtotal', 'tax', 'thank', 'receipt', 'store', 'date', 'time']; const foundReceiptWords = receiptWords.filter(word => text.toLowerCase().includes(word)).length; confidence += foundReceiptWords * 0.05; return Math.min(1, confidence); };
export const performEnhancedMLKitOCR = async (imageUri, ocrSettings) => { const attempts = []; const maxAttempts = ocrSettings.multipleAttempts ? 3 : 1; for (let attempt = 1; attempt <= maxAttempts; attempt++) { try { const result = await TextRecognition.recognize(imageUri); const extractedText = result.text || ''; const blocks = result.blocks || []; const confidence = calculateTextConfidence(extractedText, blocks); attempts.push({ attempt, text: extractedText, blocks: blocks, confidence: confidence }); if (extractedText.length > 50 && confidence > ocrSettings.confidenceThreshold) { return { text: extractedText, blocks: blocks, confidence: confidence, engine: `ML Kit (Attempt ${attempt})`, attempts: attempts }; } if (attempt < maxAttempts) { await new Promise(resolve => setTimeout(resolve, 1000)); } } catch (error) { console.error(`ML Kit OCR Attempt ${attempt} Error:`, error); attempts.push({ attempt, error: error.message, success: false }); } } const successfulAttempts = attempts.filter(a => a.text); if (successfulAttempts.length > 0) { const bestAttempt = successfulAttempts.reduce((best, current) => current.confidence > best.confidence ? current : best); return { text: bestAttempt.text, blocks: bestAttempt.blocks, confidence: bestAttempt.confidence, engine: `ML Kit (Best of ${maxAttempts})`, attempts: attempts }; } throw new Error(`All ${maxAttempts} OCR attempts failed`); };
const extractMerchant = (lines) => { const merchantPatterns = [ /^[A-Z\s&'.-]{4,40}$/, /^[A-Z][a-zA-Z\s&'.-]{3,40}$/, /^[A-Z]{2,}\s+[A-Z]{2,}/, /^[A-Za-z]+\s*[A-Za-z]*\s*[A-Za-z]*$/ ]; for (let i = 0; i < Math.min(5, lines.length); i++) { const line = lines[i]; if (line.match(/\$\d/) || line.match(/^\d+/) || line.length < 3) continue; for (const pattern of merchantPatterns) { if (pattern.test(line)) return line; } } return 'Unknown Store'; };
const extractDate = (lines) => { const datePatterns = [ /\d{1,2}\/\d{1,2}\/\d{2,4}/, /\d{1,2}-\d{1,2}-\d{2,4}/, /\d{4}-\d{2}-\d{2}/, /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2},?\s+\d{4}/i ]; for (const line of lines) { for (const pattern of datePatterns) { const match = line.match(pattern); if (match) return match[0]; } } return new Date().toISOString().split('T')[0]; };
const extractTotals = (lines) => { let total = 0; let subtotal = 0; let tax = 0; const totalLineIndices = new Set(); const numberRegex = /(\d[\d,]*\.\d{2}|\d[\d,]*)/g; // More flexible: 1,234.56 or 1234 or 12.3
    console.log('[extractTotals] Starting extraction. Lines:', lines.length);
    let potentialTotals = [];
    for (let i = lines.length - 1; i >= 0; i--) {
        const line = lines[i];
        const lowerLine = line.toLowerCase();
        const numbersFound = (line.match(numberRegex) || []).map(n_str => parseFloat(n_str.replace(/,/g, ''))); // Remove commas before parsing
        
        if (numbersFound.length === 0) continue;
        const maxNumberInLine = Math.max(...numbersFound.filter(n => !isNaN(n))); // Filter out NaN before Math.max
        if (isNaN(maxNumberInLine)) continue;

        console.log(`[extractTotals] Line ${i} ("${line}") - Numbers: ${numbersFound.join(', ')} - Max: ${maxNumberInLine}`);

        if ((lowerLine.includes('total') && !lowerLine.includes('sub')) || lowerLine.startsWith('cash') || lowerLine.includes('amount due')) {
            console.log(`[extractTotals] Potential total found: ${maxNumberInLine} on line: "${line}"`);
            potentialTotals.push(maxNumberInLine);
            totalLineIndices.add(i);
        } else if (lowerLine.includes('subtotal') || lowerLine.includes('sub total')) {
            subtotal = Math.max(subtotal, maxNumberInLine);
            totalLineIndices.add(i);
            console.log(`[extractTotals] Subtotal found: ${maxNumberInLine} (current subtotal: ${subtotal})`);
        } else if (lowerLine.includes('tax') || lowerLine.includes('gst') || lowerLine.includes('vat')) {
            tax = Math.max(tax, maxNumberInLine);
            totalLineIndices.add(i);
            console.log(`[extractTotals] Tax found: ${maxNumberInLine} (current tax: ${tax})`);
        }
    }
    if (potentialTotals.length > 0) {
        total = Math.max(...potentialTotals.filter(n => !isNaN(n))); // Filter NaN again
        if(isNaN(total)) total = 0; // Default to 0 if Math.max resulted in NaN
    }
    console.log(`[extractTotals] Final extracted - Total: ${total}, Subtotal: ${subtotal}, Tax: ${tax}`);
    return { total, subtotal, tax, totalLineIndices: Array.from(totalLineIndices) };
};

const shouldSkipLine = (line) => {
    const trimmedLine = line.trim();
    const lowerLine = trimmedLine.toLowerCase();

    // More robust patterns for summary lines
    const summaryKeywords = ['total', 'subtotal', 'sub total', 'tax', 'vat', 'gst', 'cash', 'change', 'balance', 'due', 'amount tender', 'payment'];
    for (const keyword of summaryKeywords) {
        // Check if keyword is present AND there's any number on the line.
        // The regex /\d/ checks for at least one digit.
        if (lowerLine.includes(keyword) && trimmedLine.match(/\d/)) {
            return true;
        }
    }
    
    const exactSkipPatterns = [
        /^(receipt|thank\s*you|visit|welcome|store|location|phone|address|cashier|clerk|tran\s#)/i,
        /^(card|credit|debit|payment\s*type)/i,
        /^[\d\s\-\/\:\.,]+$/, // Allowing comma in numbers-only lines
        /^store\s*#?\d+/i,
        /^\*+$/, /^-+$/, /^=+$/,
        /^\(\d{3}\)\s*\d{3}[\s\-]?\d{4}$/,
        /^\d+\s+[A-Za-z\s]+\s+(way|street|ave|blvd|drive|dr|st)$/i,
        /^\d{1,2}\/\d{1,2}\/\d{2,4}/, // More specific date match
        /^www\..+\..+/i, 
        /.+@.+\..+/i, 
    ];
    if (exactSkipPatterns.some(pattern => pattern.test(trimmedLine))) {
        return true;
    }
    return false;
};

const validateItem = (description, amount) => {
    if (!description || typeof amount !== 'number' || isNaN(amount)) return false; // Ensure amount is a valid number
    const trimmedDescription = description.trim().toLowerCase();
    if (trimmedDescription.length < 2 || trimmedDescription.length > 60) return false; // Increased max length
    if (amount <= 0 || amount > 9999) return false; // Increased max amount

    const summaryKeywordsForItemValidation = ['tax', 'total', 'subtotal', 'sub total', 'change', 'cash', 'payment', 'balance', 'discount', 'coupon', 'due', 'tendered', 'amount paid'];
    if (summaryKeywordsForItemValidation.some(keyword => {
        // Check if keyword is a whole word in the description to avoid partial matches like "totaling"
        const regex = new RegExp(`\\b${keyword}\\b`, 'i');
        return regex.test(trimmedDescription);
    })) {
        // Allow if it's a discount but specifically looks like one
        if (trimmedDescription.includes('discount') && amount < 0) return true; 
        return false;
    }
    return true;
};

const categorizeItemAdvanced = (description) => { const desc = description.toLowerCase(); const categoryMap = { 'Food': ['milk', 'bread', 'egg', 'cheese', 'pizza', 'burger', 'coffee', 'food', 'snack', 'restaurant', 'grocery', 'produce', 'meat', 'dairy', 'water', 'juice', 'soda'], 'Transport': ['gas', 'fuel', 'parking', 'uber', 'lyft', 'taxi', 'bus', 'train', 'transport', 'fare', 'diesel'], 'Health': ['medicine', 'pharmacy', 'doctor', 'clinic', 'health', 'pills', 'vitamins', 'bandages'], 'Shopping': ['clothes', 'shirt', 'pants', 'shoes', 'soap', 'shampoo', 'store', 'retail', 'household', 'gift', 'electronics', 'books'], 'Entertainment': ['movie', 'cinema', 'game', 'concert', 'ticket', 'entertainment', 'bar', 'pub'], 'Bills': ['electric', 'water', 'internet', 'phone', 'cable', 'insurance', 'rent', 'utility', 'bills', 'subscription'] }; for (const [category, keywords] of Object.entries(categoryMap)) { if (keywords.some(keyword => desc.includes(keyword))) return category; } return 'Other'; };
const calculateItemConfidence = (description, amount) => { let confidence = 0.5; if (amount >= 0.5 && amount <= 200) confidence += 0.2; if (description.length >= 3 && description.length <= 30) confidence += 0.2; if (description.match(/[a-z]/)) confidence += 0.1; if (description.match(/^\d+$/)) confidence -= 0.4; return Math.max(0, Math.min(1, confidence)); };
const createItemObject = (description, amount, lineNumber) => { const cleanDescription = description.trim().replace(/^\d+\s*/, ''); return { id: `${lineNumber}-${cleanDescription.slice(0,10)}-${amount}`, description: cleanDescription, amount: amount, category: categorizeItemAdvanced(cleanDescription), selected: true, lineNumber: lineNumber, confidence: calculateItemConfidence(cleanDescription, amount) }; };
const isPotentialItem = (line) => { return line.match(/[A-Za-z]{2,}/) && line.match(/\d/) && line.length >= 3 && line.length <= 70; };
const scorePotentialItem = (line) => { let score = 0; if (line.match(/\$?\d+\.?\d{0,2}/)) score += 0.3; if (line.match(/[A-Za-z]{3,}/)) score += 0.2; if (line.length >= 5 && line.length <= 40) score += 0.2; if (line.match(/\d+\s*x\s*\d/i) || line.match(/@\s*\d/i) || line.match(/qty\s*\d/i) ) score += 0.3; return score; };
const extractItemsMultiStrategy = (lines, totalLineIndices) => { const items = []; const potentialItems = []; const standardPatterns = [ /^(.+?)\s{1,}\$?(\d+\.\d{2})$/, /^(.+?)\s{2,}(\d+\.?\d{0,2})$/, /^(.+?)\s*\$(\d+\.?\d{0,2})$/, ]; const quantityPatterns = [ /^(.+?)\s+(\d+)\s*x\s*\$?(\d+\.?\d{0,2})$/i, /^(\d+)\s+(.+?)\s+\$?(\d+\.?\d{0,2})$/, /^(.+?)\s+qty\s*:?\s*(\d+)\s+\$?(\d+\.?\d{0,2})$/i ]; const multiLinePattern = /^1@\s*\$?(\d+\.?\d{0,2})$/; for (let i = 0; i < lines.length; i++) { const line = lines[i].trim(); const nextLine = i + 1 < lines.length ? lines[i + 1].trim() : null; if (totalLineIndices.includes(i) || shouldSkipLine(line)) { continue; } let itemFound = false; const multiLineMatch = line.match(multiLinePattern); if (multiLineMatch && nextLine && !shouldSkipLine(nextLine) && nextLine.match(/^[A-Za-z][A-Za-z\s&'-]{2,40}$/)) { const amount = parseFloat(multiLineMatch[1]); const description = nextLine; if (validateItem(description, amount)) { items.push(createItemObject(description, amount, i + 1)); itemFound = true; i++; } } if (itemFound) continue; for (const pattern of quantityPatterns) { const match = line.match(pattern); if (match) { let description, amountStr; if (pattern.source === quantityPatterns[0].source) { description = match[1]; amountStr = match[3]; } else if (pattern.source === quantityPatterns[1].source) { description = match[2]; amountStr = match[3]; } else { description = match[1]; amountStr = match[3]; } const amount = parseFloat(amountStr); if (validateItem(description.trim(), amount)) { items.push(createItemObject(description.trim(), amount, i + 1)); itemFound = true; break; } } } if (itemFound) continue; for (const pattern of standardPatterns) { const match = line.match(pattern); if (match) { const description = match[1].trim(); const amount = parseFloat(match[2]); if (validateItem(description, amount)) { items.push(createItemObject(description, amount, i + 1)); itemFound = true; break; } } } if (itemFound) continue; if (!itemFound && isPotentialItem(line) && !shouldSkipLine(line)) { potentialItems.push({ text: line, lineNumber: i + 1, score: scorePotentialItem(line) }); } } items.sort((a, b) => (b.confidence || 0) - (a.confidence || 0)); potentialItems.sort((a, b) => b.score - a.score); return { items, potentialItems }; };
const calculateParsingConfidence = (parseResult) => { let confidence = 0; if (parseResult.merchant && parseResult.merchant !== 'Unknown Store') confidence += 0.2; if (parseResult.total > 0) confidence += 0.3; if (parseResult.items.length > 0) confidence += 0.3; const avgItemConfidence = parseResult.items.length > 0 ? parseResult.items.reduce((sum, item) => sum + (item.confidence || 0), 0) / parseResult.items.length : 0; confidence += avgItemConfidence * 0.2; return Math.min(1, confidence); };
export const parseReceiptAdvanced = (text, blocks = []) => { const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0); const parseResult = { merchant: '', items: [], potentialItems: [], total: 0, subtotal: 0, tax: 0, date: '', confidence: 0, processingSteps: [] }; parseResult.processingSteps.push('🏪 Extracting merchant...'); parseResult.merchant = extractMerchant(lines); parseResult.processingSteps.push('📅 Extracting date...'); parseResult.date = extractDate(lines); parseResult.processingSteps.push('💰 Extracting totals...'); const totals = extractTotals(lines); parseResult.total = totals.total; parseResult.subtotal = totals.subtotal; parseResult.tax = totals.tax; parseResult.processingSteps.push('🛍️ Extracting items...'); const itemResults = extractItemsMultiStrategy(lines, totals.totalLineIndices); parseResult.items = itemResults.items; parseResult.potentialItems = itemResults.potentialItems; parseResult.confidence = calculateParsingConfidence(parseResult); console.log('[OCR Service] Advanced parsing completed. Results:', JSON.stringify(parseResult, null, 2)); return parseResult; };
