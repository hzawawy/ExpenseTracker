import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import {launchImageLibrary} from 'react-native-image-picker';
import Icon from 'react-native-vector-icons/MaterialIcons';

const AddTransaction = ({ onAddTransaction }) => {
  const [transaction, setTransaction] = useState({
    amount: '',
    category: '',
    description: '',
    date: new Date().toISOString().split('T')[0],
    type: 'expense',
    frequency: 'once'
  });

  const categories = ['Food', 'Transport', 'Clothes', 'Entertainment', 'Health', 'Bills', 'Shopping', 'Other'];
  const incomeFrequencies = ['once', 'weekly', 'monthly', 'yearly'];

  const handleScanReceipt = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };

    launchImageLibrary(options, (response) => {
      if (response.didCancel || response.error) {
        return;
      }

      // Simulate OCR processing
      const mockData = {
        amount: (Math.random() * 100 + 10).toFixed(2),
        category: categories[Math.floor(Math.random() * categories.length)],
        description: 'Scanned receipt',
        date: new Date().toISOString().split('T')[0]
      };
      
      setTransaction({ ...transaction, ...mockData });
      Alert.alert('Receipt Scanned', 'Data extracted from receipt');
    });
  };

  const handleAddTransaction = () => {
    if (!transaction.amount || !transaction.category || !transaction.description) {
      Alert.alert('Error', 'Please fill in all required fields');
      return;
    }

    onAddTransaction(transaction);
    setTransaction({
      amount: '',
      category: '',
      description: '',
      date: new Date().toISOString().split('T')[0],
      type: 'expense',
      frequency: 'once'
    });
    Alert.alert('Success', 'Transaction added successfully');
  };

  const TypeButton = ({ type, label, isActive, onPress }) => (
    <TouchableOpacity
      style={[
        styles.typeButton,
        isActive && (type === 'expense' ? styles.expenseActive : styles.incomeActive)
      ]}
      onPress={onPress}
    >
      <Text style={[
        styles.typeButtonText,
        isActive && styles.typeButtonActiveText
      ]}>
        {label}
      </Text>
    </TouchableOpacity>
  );

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <TouchableOpacity style={styles.scanButton} onPress={handleScanReceipt}>
        <Icon name="camera-alt" size={24} color="#fff" />
        <Text style={styles.scanButtonText}>Scan Receipt</Text>
      </TouchableOpacity>

      <View style={styles.formContainer}>
        <Text style={styles.formTitle}>Add Transaction</Text>

        <View style={styles.typeContainer}>
          <TypeButton
            type="expense"
            label="Expense"
            isActive={transaction.type === 'expense'}
            onPress={() => setTransaction({...transaction, type: 'expense'})}
          />
          <TypeButton
            type="income"
            label="Income"
            isActive={transaction.type === 'income'}
            onPress={() => setTransaction({...transaction, type: 'income'})}
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Amount *</Text>
          <TextInput
            style={styles.input}
            value={transaction.amount}
            onChangeText={(text) => setTransaction({...transaction, amount: text})}
            placeholder="0.00"
            keyboardType="numeric"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Category *</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <View style={styles.categoryContainer}>
              {(transaction.type === 'expense' ? categories : ['Income']).map((cat) => (
                <TouchableOpacity
                  key={cat}
                  style={[
                    styles.categoryButton,
                    transaction.category === cat && styles.categoryButtonActive
                  ]}
                  onPress={() => setTransaction({...transaction, category: cat})}
                >
                  <Text style={[
                    styles.categoryButtonText,
                    transaction.category === cat && styles.categoryButtonActiveText
                  ]}>
                    {cat}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </ScrollView>
        </View>

        {transaction.type === 'income' && (
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Frequency</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <View style={styles.categoryContainer}>
                {incomeFrequencies.map((freq) => (
                  <TouchableOpacity
                    key={freq}
                    style={[
                      styles.categoryButton,
                      transaction.frequency === freq && styles.categoryButtonActive
                    ]}
                    onPress={() => setTransaction({...transaction, frequency: freq})}
                  >
                    <Text style={[
                      styles.categoryButtonText,
                      transaction.frequency === freq && styles.categoryButtonActiveText
                    ]}>
                      {freq.charAt(0).toUpperCase() + freq.slice(1)}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>
          </View>
        )}

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Description *</Text>
          <TextInput
            style={styles.input}
            value={transaction.description}
            onChangeText={(text) => setTransaction({...transaction, description: text})}
            placeholder="Enter description"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Date</Text>
          <TextInput
            style={styles.input}
            value={transaction.date}
            onChangeText={(text) => setTransaction({...transaction, date: text})}
            placeholder="YYYY-MM-DD"
          />
        </View>

        <TouchableOpacity style={styles.addButton} onPress={handleAddTransaction}>
          <Text style={styles.addButtonText}>Add Transaction</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scanButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#4F46E5',
    padding: 16,
    borderRadius: 12,
    marginBottom: 24,
  },
  scanButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  formContainer: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
  },
  formTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 20,
    color: '#1f2937',
  },
  typeContainer: {
    flexDirection: 'row',
    marginBottom: 20,
    gap: 12,
  },
  typeButton: {
    flex: 1,
    padding: 16,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#e5e7eb',
    alignItems: 'center',
  },
  expenseActive: {
    borderColor: '#dc2626',
    backgroundColor: '#fee2e2',
  },
  incomeActive: {
    borderColor: '#16a34a',
    backgroundColor: '#dcfce7',
  },
  typeButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#6b7280',
  },
  typeButtonActiveText: {
    color: '#1f2937',
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#1f2937',
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  categoryContainer: {
    flexDirection: 'row',
    gap: 8,
  },
  categoryButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#d1d5db',
    backgroundColor: '#f9fafb',
  },
  categoryButtonActive: {
    borderColor: '#4F46E5',
    backgroundColor: '#e0e7ff',
  },
  categoryButtonText: {
    fontSize: 14,
    color: '#6b7280',
  },
  categoryButtonActiveText: {
    color: '#4F46E5',
    fontWeight: '600',
  },
  addButton: {
    backgroundColor: '#4F46E5',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default AddTransaction;

